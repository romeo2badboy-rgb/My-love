name: Enhanced Professional RDP Server

on:
  workflow_dispatch:
    inputs:
      session_duration:
        description: 'Session duration in minutes (max 3600)'
        required: false
        default: '3600'
        type: string
      enable_logging:
        description: 'Enable detailed logging'
        required: false
        default: true
        type: boolean

env:
  TAILSCALE_VERSION: "1.82.0"
  SESSION_TIMEOUT: ${{ github.event.inputs.session_duration || '3600' }}
  ENABLE_LOGGING: ${{ github.event.inputs.enable_logging || 'true' }}

jobs:
  deploy-secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    
    steps:
      - name: üöÄ Initialize Workflow
        run: |
          Write-Host "=== Enhanced Professional RDP Server Deployment ===" -ForegroundColor Cyan
          Write-Host "Session Duration: $env:SESSION_TIMEOUT minutes" -ForegroundColor Green
          Write-Host "Logging Enabled: $env:ENABLE_LOGGING" -ForegroundColor Green
          Write-Host "Runner ID: $env:GITHUB_RUN_ID" -ForegroundColor Yellow
          Write-Host "Workflow Started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Yellow
          
          # Create logs directory
          New-Item -ItemType Directory -Path "$env:TEMP\rdp-logs" -Force | Out-Null
          
          # Set PowerShell execution policy for the session
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force

      - name: üõ°Ô∏è Configure Advanced RDP Settings
        run: |
          Write-Host "Configuring RDP settings..." -ForegroundColor Yellow
          
          try {
            # Enable Remote Desktop
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            
            # Configure RDP-Tcp settings
            $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
            Set-ItemProperty -Path $rdpPath -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path $rdpPath -Name "SecurityLayer" -Value 1 -Force
            Set-ItemProperty -Path $rdpPath -Name "MinEncryptionLevel" -Value 3 -Force
            Set-ItemProperty -Path $rdpPath -Name "fEnableWinStation" -Value 1 -Force
            
            # Configure session settings
            Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -Force
            Set-ItemProperty -Path $rdpPath -Name "MaxDisconnectionTime" -Value 0 -Force
            Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -Force
            
            Write-Host "‚úÖ RDP registry settings configured successfully" -ForegroundColor Green
          }
          catch {
            Write-Error "‚ùå Failed to configure RDP settings: $_"
            exit 1
          }

      - name: üî• Configure Enhanced Firewall Rules
        run: |
          Write-Host "Configuring advanced firewall rules..." -ForegroundColor Yellow
          
          # Remove existing rules to avoid conflicts
          $rulesToRemove = @("RDP-Enhanced", "HTTP-Enhanced", "HTTPS-Enhanced", "Custom-3822")
          foreach ($rule in $rulesToRemove) {
            try {
              netsh advfirewall firewall delete rule name="$rule" | Out-Null
            } catch {
              # Rule doesn't exist, continue
            }
          }
          
          # Add enhanced firewall rules with detailed configuration
          $firewallRules = @(
            @{Name="RDP-Enhanced"; Port=3389; Protocol="TCP"; Description="Enhanced RDP Access"},
            @{Name="HTTP-Enhanced"; Port=80; Protocol="TCP"; Description="HTTP Web Server"},
            @{Name="HTTPS-Enhanced"; Port=443; Protocol="TCP"; Description="HTTPS Secure Web Server"},
            @{Name="Custom-3822"; Port=3822; Protocol="TCP"; Description="Custom Service Port"}
          )
          
          foreach ($rule in $firewallRules) {
            try {
              netsh advfirewall firewall add rule name="$($rule.Name)" dir=in action=allow protocol=$($rule.Protocol) localport=$($rule.Port) profile=any enable=yes
              
              Write-Host "‚úÖ Firewall rule added: $($rule.Name) (Port $($rule.Port))" -ForegroundColor Green
            }
            catch {
              Write-Warning "‚ö†Ô∏è Failed to add firewall rule for port $($rule.Port): $_"
            }
          }
          
          # Verify firewall rules
          Write-Host "`nüîç Verifying firewall rules:" -ForegroundColor Cyan
          netsh advfirewall firewall show rule name=all | Select-String "RDP-Enhanced|HTTP-Enhanced|HTTPS-Enhanced|Custom-3822"

      - name: üë§ Create Secure Administrative User
        run: |
          Write-Host "Creating secure administrative user..." -ForegroundColor Yellow
          
          try {
            # Enhanced password generation with better entropy
            Add-Type -AssemblyName System.Security
            $charSets = @{
              Upper   = [char[]]([char]'A'..[char]'Z')
              Lower   = [char[]]([char]'a'..[char]'z')  
              Number  = [char[]]([char]'0'..[char]'9')
              Special = [char[]]('!@#$%^&*()_+-=[]{}|;:,.<>?'.ToCharArray())
            }
            
            # Generate secure password (20 characters)
            $rawPassword = @()
            $rawPassword += $charSets.Upper | Get-Random -Count 5
            $rawPassword += $charSets.Lower | Get-Random -Count 5  
            $rawPassword += $charSets.Number | Get-Random -Count 5
            $rawPassword += $charSets.Special | Get-Random -Count 5
            
            $password = -join ($rawPassword | Sort-Object { Get-Random })
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            
            # Create user account
            $userParams = @{
              Name = "RDPAdmin"
              Password = $securePass
              AccountNeverExpires = $true
              PasswordNeverExpires = $true
              UserMayNotChangePassword = $false
              Description = "Enhanced RDP Administrative Account"
            }
            
            New-LocalUser @userParams
            
            # Add to required groups
            Add-LocalGroupMember -Group "Administrators" -Member "RDPAdmin"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPAdmin"
            Add-LocalGroupMember -Group "Users" -Member "RDPAdmin"
            
            # Store credentials securely in environment
            echo "RDP_USERNAME=RDPAdmin" >> $env:GITHUB_ENV
            echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
            
            # Verify user creation
            $user = Get-LocalUser -Name "RDPAdmin" -ErrorAction SilentlyContinue
            if ($user) {
              Write-Host "‚úÖ User 'RDPAdmin' created successfully" -ForegroundColor Green
              Write-Host "üë• User Groups: $(Get-LocalGroup | Where-Object { (Get-LocalGroupMember -Group $_.Name -ErrorAction SilentlyContinue).Name -contains 'RDPAdmin' } | Select-Object -ExpandProperty Name)" -ForegroundColor Cyan
            } else {
              throw "User creation verification failed"
            }
          }
          catch {
            Write-Error "‚ùå Failed to create user account: $_"
            exit 1
          }

      - name: üîß Install and Configure Tailscale
        run: |
          Write-Host "Installing Tailscale VPN client..." -ForegroundColor Yellow
          
          try {
            $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-$env:TAILSCALE_VERSION-amd64.msi"
            $installerPath = "$env:TEMP\tailscale-installer.msi"
            $logPath = "$env:TEMP\rdp-logs\tailscale-install.log"
            
            # Download with progress indication
            Write-Host "üì• Downloading Tailscale v$env:TAILSCALE_VERSION..." -ForegroundColor Cyan
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile($tsUrl, $installerPath)
            
            # Verify download
            if (-not (Test-Path $installerPath)) {
              throw "Tailscale installer download failed"
            }
            
            $fileSize = [math]::Round((Get-Item $installerPath).Length / 1MB, 2)
            Write-Host "üì¶ Downloaded: ${fileSize}MB" -ForegroundColor Green
            
            # Install with detailed logging
            Write-Host "üîß Installing Tailscale..." -ForegroundColor Cyan
            $installArgs = @("/i", "`"$installerPath`"", "/quiet", "/norestart", "/L*v", "`"$logPath`"")
            $process = Start-Process -FilePath "msiexec.exe" -ArgumentList $installArgs -Wait -PassThru
            
            if ($process.ExitCode -eq 0) {
              Write-Host "‚úÖ Tailscale installed successfully" -ForegroundColor Green
            } else {
              throw "Tailscale installation failed with exit code: $($process.ExitCode)"
            }
            
            # Cleanup installer
            Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          }
          catch {
            Write-Error "‚ùå Tailscale installation failed: $_"
            if (Test-Path "$env:TEMP\rdp-logs\tailscale-install.log") {
              Write-Host "üìã Installation log:" -ForegroundColor Yellow
              Get-Content "$env:TEMP\rdp-logs\tailscale-install.log" | Select-Object -Last 20
            }
            exit 1
          }

      - name: üåê Establish Tailscale Network Connection
        run: |
          Write-Host "Establishing Tailscale network connection..." -ForegroundColor Yellow
          
          try {
            $tailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
            
            if (-not (Test-Path $tailscaleExe)) {
              throw "Tailscale executable not found at expected location"
            }
            
            # Generate unique hostname
            $hostname = "gh-rdp-$env:GITHUB_RUN_ID-$(Get-Date -Format 'MMddHHmm')"
            
            # Connect to Tailscale network
            Write-Host "üîó Connecting to Tailscale network with hostname: $hostname" -ForegroundColor Cyan
            $connectArgs = @("up", "--authkey=${{ secrets.TAILSCALE_AUTH_KEY }}", "--hostname=$hostname", "--accept-routes", "--accept-dns=false")
            
            $connectProcess = Start-Process -FilePath $tailscaleExe -ArgumentList $connectArgs -Wait -PassThru -NoNewWindow
            
            if ($connectProcess.ExitCode -ne 0) {
              throw "Tailscale connection failed with exit code: $($connectProcess.ExitCode)"
            }
            
            Write-Host "‚úÖ Connected to Tailscale network" -ForegroundColor Green
            
            # Wait for IP assignment with timeout
            Write-Host "‚è≥ Waiting for Tailscale IP assignment..." -ForegroundColor Cyan
            $tsIP = $null
            $maxRetries = 15
            $retryCount = 0
            
            while (-not $tsIP -and $retryCount -lt $maxRetries) {
              Start-Sleep -Seconds 3
              $retryCount++
              
              try {
                $ipOutput = & $tailscaleExe ip -4 2>$null
                if ($ipOutput -and $ipOutput -match '^\d+\.\d+\.\d+\.\d+$') {
                  $tsIP = $ipOutput.Trim()
                }
              }
              catch {
                Write-Host "." -NoNewline -ForegroundColor Yellow
              }
              
              if ($retryCount -eq 5 -or $retryCount -eq 10) {
                Write-Host "`nüîÑ Still waiting for IP... (Attempt $retryCount/$maxRetries)" -ForegroundColor Yellow
              }
            }
            
            if (-not $tsIP) {
              throw "Failed to obtain Tailscale IP address after $maxRetries attempts"
            }
            
            Write-Host "`nüéØ Tailscale IP assigned: $tsIP" -ForegroundColor Green
            echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
            echo "TAILSCALE_HOSTNAME=$hostname" >> $env:GITHUB_ENV
            
            # Get additional network info
            $networkInfo = & $tailscaleExe status --json 2>$null | ConvertFrom-Json -ErrorAction SilentlyContinue
            if ($networkInfo) {
              Write-Host "üìä Network Status: Online" -ForegroundColor Green
              Write-Host "üè∑Ô∏è Tailnet: $($networkInfo.BackendState)" -ForegroundColor Cyan
            }
          }
          catch {
            Write-Error "‚ùå Tailscale connection failed: $_"
            
            # Show Tailscale logs for debugging
            Write-Host "üìã Tailscale status for debugging:" -ForegroundColor Yellow
            try {
              & $tailscaleExe status 2>&1
            } catch {
              Write-Host "Could not retrieve Tailscale status"
            }
            
            exit 1
          }

      - name: üîç Comprehensive Connectivity Verification
        run: |
          Write-Host "Performing comprehensive connectivity verification..." -ForegroundColor Yellow
          
          try {
            $tsIP = $env:TAILSCALE_IP
            $portsToTest = @(3389, 80, 443, 3822)
            $allTestsPassed = $true
            
            Write-Host "üéØ Target IP: $tsIP" -ForegroundColor Cyan
            Write-Host "üîå Testing ports: $($portsToTest -join ', ')" -ForegroundColor Cyan
            
            foreach ($port in $portsToTest) {
              Write-Host "`nüß™ Testing port $port..." -NoNewline -ForegroundColor Yellow
              
              try {
                $testResult = Test-NetConnection -ComputerName $tsIP -Port $port -WarningAction SilentlyContinue -ErrorAction Stop
                
                if ($testResult.TcpTestSucceeded) {
                  Write-Host " ‚úÖ PASS" -ForegroundColor Green
                } else {
                  Write-Host " ‚ùå FAIL (No response)" -ForegroundColor Red
                  $allTestsPassed = $false
                }
              }
              catch {
                Write-Host " ‚ùå FAIL (Error: $($_.Exception.Message))" -ForegroundColor Red
                $allTestsPassed = $false
              }
            }
            
            # Additional system checks
            Write-Host "`nüîß System Service Status:" -ForegroundColor Cyan
            $services = @("TermService", "Tailscale")
            foreach ($service in $services) {
              $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
              if ($svc) {
                $status = if ($svc.Status -eq "Running") { "‚úÖ" } else { "‚ùå" }
                Write-Host "  $status $service: $($svc.Status)" -ForegroundColor $(if ($svc.Status -eq "Running") { "Green" } else { "Red" })
              }
            }
            
            # Network interface check
            Write-Host "`nüåê Network Interfaces:" -ForegroundColor Cyan
            Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | ForEach-Object {
              Write-Host "  ‚úÖ $($_.Name): $($_.LinkSpeed)" -ForegroundColor Green
            }
            
            if (-not $allTestsPassed) {
              Write-Warning "‚ö†Ô∏è Some connectivity tests failed, but continuing..."
            } else {
              Write-Host "`n‚úÖ All connectivity tests passed!" -ForegroundColor Green
            }
          }
          catch {
            Write-Error "‚ùå Connectivity verification failed: $_"
            exit 1
          }

      - name: üöÄ Start Enhanced Services
        run: |
          Write-Host "Starting enhanced services..." -ForegroundColor Yellow
          
          try {
            # Restart Terminal Services with enhanced configuration
            Write-Host "üîÑ Restarting Terminal Services..." -ForegroundColor Cyan
            Restart-Service -Name TermService -Force
            
            # Start Windows Remote Management (if available)
            try {
              Start-Service -Name WinRM -ErrorAction SilentlyContinue
              Write-Host "‚úÖ WinRM service started" -ForegroundColor Green
            } catch {
              Write-Host "‚ÑπÔ∏è WinRM service not available or already running" -ForegroundColor Yellow
            }
            
            # Configure IIS if available (for HTTP/HTTPS ports)
            $iisFeature = Get-WindowsFeature -Name IIS-WebServer -ErrorAction SilentlyContinue
            if ($iisFeature -and $iisFeature.InstallState -eq "Available") {
              Write-Host "üåê IIS detected but not installed - ports 80/443 available for custom services" -ForegroundColor Yellow
            }
            
            Write-Host "‚úÖ Service startup completed" -ForegroundColor Green
          }
          catch {
            Write-Warning "‚ö†Ô∏è Some services failed to start: $_"
          }

      - name: üìä Display Connection Information
        run: |
          Write-Host ""
          Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Cyan
          Write-Host "‚ïë                    üéØ RDP SERVER READY FOR CONNECTION            ‚ïë" -ForegroundColor Cyan  
          Write-Host "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" -ForegroundColor Cyan
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ïë  üì° Server Address: $($env:TAILSCALE_IP.PadRight(42)) ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  üë§ Username:       RDPAdmin                                    ‚ïë" -ForegroundColor White  
          Write-Host "‚ïë  üîê Password:       $($env:RDP_PASSWORD.PadRight(42)) ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  üè∑Ô∏è  Hostname:       $($env:TAILSCALE_HOSTNAME.PadRight(42)) ‚ïë" -ForegroundColor White
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" -ForegroundColor Cyan
          Write-Host "‚ïë  üîå Available Ports:                                             ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ïë     ‚Ä¢ 3389 (RDP)    ‚Ä¢ 80 (HTTP)    ‚Ä¢ 443 (HTTPS)    ‚Ä¢ 3822     ‚ïë" -ForegroundColor White
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan  
          Write-Host "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" -ForegroundColor Cyan
          Write-Host "‚ïë  ‚è±Ô∏è  Session Duration: $($env:SESSION_TIMEOUT.PadLeft(3)) minutes                              ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  üïê Started At:       $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')                ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  ‚ö° Status:           ACTIVE & READY                            ‚ïë" -ForegroundColor Green
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Cyan
          Write-Host ""
          
          # Save connection info to file
          $connectionInfo = @"
=== RDP CONNECTION DETAILS ===
Server IP: $env:TAILSCALE_IP
Username: RDPAdmin  
Password: $env:RDP_PASSWORD
Hostname: $env:TAILSCALE_HOSTNAME
Available Ports: 3389, 80, 443, 3822
Session Started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
Session Duration: $env:SESSION_TIMEOUT minutes
================================
"@
          
          $connectionInfo | Out-File -FilePath "$env:TEMP\rdp-logs\connection-info.txt" -Encoding UTF8

      - name: üí™ Maintain Active Session
        run: |
          Write-Host "üîÑ Maintaining active RDP session..." -ForegroundColor Green
          Write-Host "üí° Use 'Cancel workflow' button in GitHub Actions to terminate" -ForegroundColor Yellow
          Write-Host "üìã Connection info saved to logs for reference" -ForegroundColor Cyan
          
          $startTime = Get-Date
          $sessionDurationMinutes = [int]$env:SESSION_TIMEOUT
          $endTime = $startTime.AddMinutes($sessionDurationMinutes)
          $logInterval = 300 # 5 minutes
          $statusInterval = 30 # 30 seconds
          $lastLog = Get-Date
          
          try {
            while ((Get-Date) -lt $endTime) {
              $currentTime = Get-Date
              $elapsed = [math]::Round(($currentTime - $startTime).TotalMinutes, 1)
              $remaining = [math]::Round(($endTime - $currentTime).TotalMinutes, 1)
              
              # Show detailed status every 5 minutes
              if (($currentTime - $lastLog).TotalSeconds -ge $logInterval) {
                Write-Host "`nüìä SESSION STATUS UPDATE" -ForegroundColor Cyan
                Write-Host "‚è±Ô∏è  Elapsed Time: $elapsed minutes" -ForegroundColor White
                Write-Host "‚è≥ Remaining Time: $remaining minutes" -ForegroundColor White
                Write-Host "üåê Tailscale IP: $env:TAILSCALE_IP" -ForegroundColor White
                Write-Host "üîó Connection: ACTIVE" -ForegroundColor Green
                Write-Host "üíª System: $(Get-ComputerInfo | Select-Object -ExpandProperty WindowsProductName)" -ForegroundColor White
                
                # Check service health
                $termSvc = Get-Service -Name TermService -ErrorAction SilentlyContinue
                $tailscaleSvc = Get-Service -Name Tailscale -ErrorAction SilentlyContinue
                
                Write-Host "üîß RDP Service: $(if ($termSvc -and $termSvc.Status -eq 'Running') {'‚úÖ Running'} else {'‚ùå Issue'})" -ForegroundColor $(if ($termSvc -and $termSvc.Status -eq 'Running') {'Green'} else {'Red'})
                Write-Host "üåê Tailscale Service: $(if ($tailscaleSvc -and $tailscaleSvc.Status -eq 'Running') {'‚úÖ Running'} else {'‚ùå Issue'})" -ForegroundColor $(if ($tailscaleSvc -and $tailscaleSvc.Status -eq 'Running') {'Green'} else {'Red'})
                
                $lastLog = $currentTime
              } else {
                # Show brief status every 30 seconds
                Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üü¢ RDP Active | ‚è±Ô∏è $elapsed min elapsed | ‚è≥ $remaining min remaining" -ForegroundColor Green
              }
              
              Start-Sleep -Seconds $statusInterval
            }
            
            Write-Host "`n‚è∞ Session timeout reached. Shutting down gracefully..." -ForegroundColor Yellow
          }
          catch {
            Write-Host "`nüõë Session interrupted: $_" -ForegroundColor Red
          }
          finally {
            Write-Host "üèÅ Session ended at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Cyan
            Write-Host "üìä Total session duration: $([math]::Round(((Get-Date) - $startTime).TotalMinutes, 1)) minutes" -ForegroundColor White
          }

      - name: üßπ Cleanup and Security
        if: always()
        run: |
          Write-Host "Performing security cleanup..." -ForegroundColor Yellow
          
          try {
            # Clear sensitive environment variables
            Remove-Item Env:RDP_PASSWORD -ErrorAction SilentlyContinue
            
            # Remove the user account (optional - uncomment if desired)
            # Remove-LocalUser -Name "RDPAdmin" -ErrorAction SilentlyContinue
            
            # Disconnect from Tailscale
            $tailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
            if (Test-Path $tailscaleExe) {
              & $tailscaleExe down 2>$null
              Write-Host "‚úÖ Disconnected from Tailscale network" -ForegroundColor Green
            }
            
            Write-Host "‚úÖ Cleanup completed successfully" -ForegroundColor Green
          }
          catch {
            Write-Warning "‚ö†Ô∏è Cleanup warning: $_"
          }          }
          catch {
            Write-Error "‚ùå Failed to configure RDP settings: $_"
            exit 1
          }

      - name: üî• Configure Enhanced Firewall Rules
        run: |
          Write-Host "Configuring advanced firewall rules..." -ForegroundColor Yellow
          
          # Remove existing rules to avoid conflicts
          $rulesToRemove = @("RDP-Enhanced", "HTTP-Enhanced", "HTTPS-Enhanced", "Custom-3822")
          foreach ($rule in $rulesToRemove) {
            try {
              netsh advfirewall firewall delete rule name="$rule" | Out-Null
            } catch {
              # Rule doesn't exist, continue
            }
          }
          
          # Add enhanced firewall rules with detailed configuration
          $firewallRules = @(
            @{Name="RDP-Enhanced"; Port=3389; Protocol="TCP"; Description="Enhanced RDP Access"},
            @{Name="HTTP-Enhanced"; Port=80; Protocol="TCP"; Description="HTTP Web Server"},
            @{Name="HTTPS-Enhanced"; Port=443; Protocol="TCP"; Description="HTTPS Secure Web Server"},
            @{Name="Custom-3822"; Port=3822; Protocol="TCP"; Description="Custom Service Port"}
          )
          
          foreach ($rule in $firewallRules) {
            try {
              netsh advfirewall firewall add rule `
                name="$($rule.Name)" `
                dir=in `
                action=allow `
                protocol=$($rule.Protocol) `
                localport=$($rule.Port) `
                profile=any `
                enable=yes
              
              Write-Host "‚úÖ Firewall rule added: $($rule.Name) (Port $($rule.Port))" -ForegroundColor Green
            }
            catch {
              Write-Warning "‚ö†Ô∏è Failed to add firewall rule for port $($rule.Port): $_"
            }
          }
          
          # Verify firewall rules
          Write-Host "`nüîç Verifying firewall rules:" -ForegroundColor Cyan
          netsh advfirewall firewall show rule name=all | Select-String "RDP-Enhanced|HTTP-Enhanced|HTTPS-Enhanced|Custom-3822"

      - name: üë§ Create Secure Administrative User
        run: |
          Write-Host "Creating secure administrative user..." -ForegroundColor Yellow
          
          try {
            # Enhanced password generation with better entropy
            Add-Type -AssemblyName System.Security
            $charSets = @{
              Upper   = [char[]]([char]'A'..[char]'Z')
              Lower   = [char[]]([char]'a'..[char]'z')  
              Number  = [char[]]([char]'0'..[char]'9')
              Special = [char[]]('!@#$%^&*()_+-=[]{}|;:,.<>?'.ToCharArray())
            }
            
            # Generate secure password (20 characters)
            $rawPassword = @()
            $rawPassword += $charSets.Upper | Get-Random -Count 5
            $rawPassword += $charSets.Lower | Get-Random -Count 5  
            $rawPassword += $charSets.Number | Get-Random -Count 5
            $rawPassword += $charSets.Special | Get-Random -Count 5
            
            $password = -join ($rawPassword | Sort-Object { Get-Random })
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            
            # Create user account
            $userParams = @{
              Name = "RDPAdmin"
              Password = $securePass
              AccountNeverExpires = $true
              PasswordNeverExpires = $true
              UserMayNotChangePassword = $false
              Description = "Enhanced RDP Administrative Account"
            }
            
            New-LocalUser @userParams
            
            # Add to required groups
            Add-LocalGroupMember -Group "Administrators" -Member "RDPAdmin"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPAdmin"
            Add-LocalGroupMember -Group "Users" -Member "RDPAdmin"
            
            # Store credentials securely in environment
            echo "RDP_USERNAME=RDPAdmin" >> $env:GITHUB_ENV
            echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
            
            # Verify user creation
            $user = Get-LocalUser -Name "RDPAdmin" -ErrorAction SilentlyContinue
            if ($user) {
              Write-Host "‚úÖ User 'RDPAdmin' created successfully" -ForegroundColor Green
              Write-Host "üë• User Groups: $(Get-LocalGroup | Where-Object { (Get-LocalGroupMember -Group $_.Name -ErrorAction SilentlyContinue).Name -contains 'RDPAdmin' } | Select-Object -ExpandProperty Name)" -ForegroundColor Cyan
            } else {
              throw "User creation verification failed"
            }
          }
          catch {
            Write-Error "‚ùå Failed to create user account: $_"
            exit 1
          }

      - name: üîß Install and Configure Tailscale
        run: |
          Write-Host "Installing Tailscale VPN client..." -ForegroundColor Yellow
          
          try {
            $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-$env:TAILSCALE_VERSION-amd64.msi"
            $installerPath = "$env:TEMP\tailscale-installer.msi"
            $logPath = "$env:TEMP\rdp-logs\tailscale-install.log"
            
            # Download with progress indication
            Write-Host "üì• Downloading Tailscale v$env:TAILSCALE_VERSION..." -ForegroundColor Cyan
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile($tsUrl, $installerPath)
            
            # Verify download
            if (-not (Test-Path $installerPath)) {
              throw "Tailscale installer download failed"
            }
            
            $fileSize = [math]::Round((Get-Item $installerPath).Length / 1MB, 2)
            Write-Host "üì¶ Downloaded: ${fileSize}MB" -ForegroundColor Green
            
            # Install with detailed logging
            Write-Host "üîß Installing Tailscale..." -ForegroundColor Cyan
            $installArgs = @("/i", "`"$installerPath`"", "/quiet", "/norestart", "/L*v", "`"$logPath`"")
            $process = Start-Process -FilePath "msiexec.exe" -ArgumentList $installArgs -Wait -PassThru
            
            if ($process.ExitCode -eq 0) {
              Write-Host "‚úÖ Tailscale installed successfully" -ForegroundColor Green
            } else {
              throw "Tailscale installation failed with exit code: $($process.ExitCode)"
            }
            
            # Cleanup installer
            Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          }
          catch {
            Write-Error "‚ùå Tailscale installation failed: $_"
            if (Test-Path "$env:TEMP\rdp-logs\tailscale-install.log") {
              Write-Host "üìã Installation log:" -ForegroundColor Yellow
              Get-Content "$env:TEMP\rdp-logs\tailscale-install.log" | Select-Object -Last 20
            }
            exit 1
          }

      - name: üåê Establish Tailscale Network Connection
        run: |
          Write-Host "Establishing Tailscale network connection..." -ForegroundColor Yellow
          
          try {
            $tailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
            
            if (-not (Test-Path $tailscaleExe)) {
              throw "Tailscale executable not found at expected location"
            }
            
            # Generate unique hostname
            $hostname = "gh-rdp-$env:GITHUB_RUN_ID-$(Get-Date -Format 'MMddHHmm')"
            
            # Connect to Tailscale network
            Write-Host "üîó Connecting to Tailscale network with hostname: $hostname" -ForegroundColor Cyan
            $connectArgs = @("up", "--authkey=${{ secrets.TAILSCALE_AUTH_KEY }}", "--hostname=$hostname", "--accept-routes", "--accept-dns=false")
            
            $connectProcess = Start-Process -FilePath $tailscaleExe -ArgumentList $connectArgs -Wait -PassThru -NoNewWindow
            
            if ($connectProcess.ExitCode -ne 0) {
              throw "Tailscale connection failed with exit code: $($connectProcess.ExitCode)"
            }
            
            Write-Host "‚úÖ Connected to Tailscale network" -ForegroundColor Green
            
            # Wait for IP assignment with timeout
            Write-Host "‚è≥ Waiting for Tailscale IP assignment..." -ForegroundColor Cyan
            $tsIP = $null
            $maxRetries = 15
            $retryCount = 0
            
            while (-not $tsIP -and $retryCount -lt $maxRetries) {
              Start-Sleep -Seconds 3
              $retryCount++
              
              try {
                $ipOutput = & $tailscaleExe ip -4 2>$null
                if ($ipOutput -and $ipOutput -match '^\d+\.\d+\.\d+\.\d+$') {
                  $tsIP = $ipOutput.Trim()
                }
              }
              catch {
                Write-Host "." -NoNewline -ForegroundColor Yellow
              }
              
              if ($retryCount -eq 5 -or $retryCount -eq 10) {
                Write-Host "`nüîÑ Still waiting for IP... (Attempt $retryCount/$maxRetries)" -ForegroundColor Yellow
              }
            }
            
            if (-not $tsIP) {
              throw "Failed to obtain Tailscale IP address after $maxRetries attempts"
            }
            
            Write-Host "`nüéØ Tailscale IP assigned: $tsIP" -ForegroundColor Green
            echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
            echo "TAILSCALE_HOSTNAME=$hostname" >> $env:GITHUB_ENV
            
            # Get additional network info
            $networkInfo = & $tailscaleExe status --json 2>$null | ConvertFrom-Json -ErrorAction SilentlyContinue
            if ($networkInfo) {
              Write-Host "üìä Network Status: Online" -ForegroundColor Green
              Write-Host "üè∑Ô∏è Tailnet: $($networkInfo.BackendState)" -ForegroundColor Cyan
            }
          }
          catch {
            Write-Error "‚ùå Tailscale connection failed: $_"
            
            # Show Tailscale logs for debugging
            Write-Host "üìã Tailscale status for debugging:" -ForegroundColor Yellow
            try {
              & $tailscaleExe status 2>&1
            } catch {
              Write-Host "Could not retrieve Tailscale status"
            }
            
            exit 1
          }

      - name: üîç Comprehensive Connectivity Verification
        run: |
          Write-Host "Performing comprehensive connectivity verification..." -ForegroundColor Yellow
          
          try {
            $tsIP = $env:TAILSCALE_IP
            $portsToTest = @(3389, 80, 443, 3822)
            $allTestsPassed = $true
            
            Write-Host "üéØ Target IP: $tsIP" -ForegroundColor Cyan
            Write-Host "üîå Testing ports: $($portsToTest -join ', ')" -ForegroundColor Cyan
            
            foreach ($port in $portsToTest) {
              Write-Host "`nüß™ Testing port $port..." -NoNewline -ForegroundColor Yellow
              
              try {
                $testResult = Test-NetConnection -ComputerName $tsIP -Port $port -WarningAction SilentlyContinue -ErrorAction Stop
                
                if ($testResult.TcpTestSucceeded) {
                  Write-Host " ‚úÖ PASS" -ForegroundColor Green
                } else {
                  Write-Host " ‚ùå FAIL (No response)" -ForegroundColor Red
                  $allTestsPassed = $false
                }
              }
              catch {
                Write-Host " ‚ùå FAIL (Error: $($_.Exception.Message))" -ForegroundColor Red
                $allTestsPassed = $false
              }
            }
            
            # Additional system checks
            Write-Host "`nüîß System Service Status:" -ForegroundColor Cyan
            $services = @("TermService", "Tailscale")
            foreach ($service in $services) {
              $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
              if ($svc) {
                $status = if ($svc.Status -eq "Running") { "‚úÖ" } else { "‚ùå" }
                Write-Host "  $status $service: $($svc.Status)" -ForegroundColor $(if ($svc.Status -eq "Running") { "Green" } else { "Red" })
              }
            }
            
            # Network interface check
            Write-Host "`nüåê Network Interfaces:" -ForegroundColor Cyan
            Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | ForEach-Object {
              Write-Host "  ‚úÖ $($_.Name): $($_.LinkSpeed)" -ForegroundColor Green
            }
            
            if (-not $allTestsPassed) {
              Write-Warning "‚ö†Ô∏è Some connectivity tests failed, but continuing..."
            } else {
              Write-Host "`n‚úÖ All connectivity tests passed!" -ForegroundColor Green
            }
          }
          catch {
            Write-Error "‚ùå Connectivity verification failed: $_"
            exit 1
          }

      - name: üöÄ Start Enhanced Services
        run: |
          Write-Host "Starting enhanced services..." -ForegroundColor Yellow
          
          try {
            # Restart Terminal Services with enhanced configuration
            Write-Host "üîÑ Restarting Terminal Services..." -ForegroundColor Cyan
            Restart-Service -Name TermService -Force
            
            # Start Windows Remote Management (if available)
            try {
              Start-Service -Name WinRM -ErrorAction SilentlyContinue
              Write-Host "‚úÖ WinRM service started" -ForegroundColor Green
            } catch {
              Write-Host "‚ÑπÔ∏è WinRM service not available or already running" -ForegroundColor Yellow
            }
            
            # Configure IIS if available (for HTTP/HTTPS ports)
            $iisFeature = Get-WindowsFeature -Name IIS-WebServer -ErrorAction SilentlyContinue
            if ($iisFeature -and $iisFeature.InstallState -eq "Available") {
              Write-Host "üåê IIS detected but not installed - ports 80/443 available for custom services" -ForegroundColor Yellow
            }
            
            Write-Host "‚úÖ Service startup completed" -ForegroundColor Green
          }
          catch {
            Write-Warning "‚ö†Ô∏è Some services failed to start: $_"
          }

      - name: üìä Display Connection Information
        run: |
          Write-Host "`n" -NoNewline
          Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Cyan
          Write-Host "‚ïë                    üéØ RDP SERVER READY FOR CONNECTION            ‚ïë" -ForegroundColor Cyan  
          Write-Host "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" -ForegroundColor Cyan
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ïë  üì° Server Address: $($env:TAILSCALE_IP.PadRight(42)) ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  üë§ Username:       RDPAdmin                                    ‚ïë" -ForegroundColor White  
          Write-Host "‚ïë  üîê Password:       $($env:RDP_PASSWORD.PadRight(42)) ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  üè∑Ô∏è  Hostname:       $($env:TAILSCALE_HOSTNAME.PadRight(42)) ‚ïë" -ForegroundColor White
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" -ForegroundColor Cyan
          Write-Host "‚ïë  üîå Available Ports:                                             ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ïë     ‚Ä¢ 3389 (RDP)    ‚Ä¢ 80 (HTTP)    ‚Ä¢ 443 (HTTPS)    ‚Ä¢ 3822     ‚ïë" -ForegroundColor White
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan  
          Write-Host "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" -ForegroundColor Cyan
          Write-Host "‚ïë  ‚è±Ô∏è  Session Duration: $($env:SESSION_TIMEOUT.PadLeft(3)) minutes                              ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  üïê Started At:       $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')                ‚ïë" -ForegroundColor White
          Write-Host "‚ïë  ‚ö° Status:           ACTIVE & READY                            ‚ïë" -ForegroundColor Green
          Write-Host "‚ïë                                                                  ‚ïë" -ForegroundColor Cyan
          Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Cyan
          Write-Host ""
          
          # Save connection info to file
          $connectionInfo = @"
=== RDP CONNECTION DETAILS ===
Server IP: $env:TAILSCALE_IP
Username: RDPAdmin  
Password: $env:RDP_PASSWORD
Hostname: $env:TAILSCALE_HOSTNAME
Available Ports: 3389, 80, 443, 3822
Session Started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
Session Duration: $env:SESSION_TIMEOUT minutes
================================
"@
          
          $connectionInfo | Out-File -FilePath "$env:TEMP\rdp-logs\connection-info.txt" -Encoding UTF8

      - name: üí™ Maintain Active Session
        run: |
          Write-Host "üîÑ Maintaining active RDP session..." -ForegroundColor Green
          Write-Host "üí° Use 'Cancel workflow' button in GitHub Actions to terminate" -ForegroundColor Yellow
          Write-Host "üìã Connection info saved to logs for reference" -ForegroundColor Cyan
          
          $startTime = Get-Date
          $sessionDurationMinutes = [int]$env:SESSION_TIMEOUT
          $endTime = $startTime.AddMinutes($sessionDurationMinutes)
          $logInterval = 300 # 5 minutes
          $statusInterval = 30 # 30 seconds
          $lastLog = Get-Date
          
          try {
            while ((Get-Date) -lt $endTime) {
              $currentTime = Get-Date
              $elapsed = [math]::Round(($currentTime - $startTime).TotalMinutes, 1)
              $remaining = [math]::Round(($endTime - $currentTime).TotalMinutes, 1)
              
              # Show detailed status every 5 minutes
              if (($currentTime - $lastLog).TotalSeconds -ge $logInterval) {
                Write-Host "`nüìä SESSION STATUS UPDATE" -ForegroundColor Cyan
                Write-Host "‚è±Ô∏è  Elapsed Time: $elapsed minutes" -ForegroundColor White
                Write-Host "‚è≥ Remaining Time: $remaining minutes" -ForegroundColor White
                Write-Host "üåê Tailscale IP: $env:TAILSCALE_IP" -ForegroundColor White
                Write-Host "üîó Connection: ACTIVE" -ForegroundColor Green
                Write-Host "üíª System: $(Get-ComputerInfo | Select-Object -ExpandProperty WindowsProductName)" -ForegroundColor White
                
                # Check service health
                $termSvc = Get-Service -Name TermService -ErrorAction SilentlyContinue
                $tailscaleSvc = Get-Service -Name Tailscale -ErrorAction SilentlyContinue
                
                Write-Host "üîß RDP Service: $(if ($termSvc -and $termSvc.Status -eq 'Running') {'‚úÖ Running'} else {'‚ùå Issue'})" -ForegroundColor $(if ($termSvc -and $termSvc.Status -eq 'Running') {'Green'} else {'Red'})
                Write-Host "üåê Tailscale Service: $(if ($tailscaleSvc -and $tailscaleSvc.Status -eq 'Running') {'‚úÖ Running'} else {'‚ùå Issue'})" -ForegroundColor $(if ($tailscaleSvc -and $tailscaleSvc.Status -eq 'Running') {'Green'} else {'Red'})
                
                $lastLog = $currentTime
              } else {
                # Show brief status every 30 seconds
                Write-Host "[$(Get-Date -Format 'HH:mm:ss')] üü¢ RDP Active | ‚è±Ô∏è $elapsed min elapsed | ‚è≥ $remaining min remaining" -ForegroundColor Green
              }
              
              Start-Sleep -Seconds $statusInterval
            }
            
            Write-Host "`n‚è∞ Session timeout reached. Shutting down gracefully..." -ForegroundColor Yellow
          }
          catch {
            Write-Host "`nüõë Session interrupted: $_" -ForegroundColor Red
          }
          finally {
            Write-Host "üèÅ Session ended at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Cyan
            Write-Host "üìä Total session duration: $([math]::Round(((Get-Date) - $startTime).TotalMinutes, 1)) minutes" -ForegroundColor White
          }

      - name: üßπ Cleanup and Security
        if: always()
        run: |
          Write-Host "Performing security cleanup..." -ForegroundColor Yellow
          
          try {
            # Clear sensitive environment variables
            Remove-Item Env:RDP_PASSWORD -ErrorAction SilentlyContinue
            
            # Remove the user account (optional - uncomment if desired)
            # Remove-LocalUser -Name "RDPAdmin" -ErrorAction SilentlyContinue
            
            # Disconnect from Tailscale
            $tailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
            if (Test-Path $tailscaleExe) {
              & $tailscaleExe down 2>$null
              Write-Host "‚úÖ Disconnected from Tailscale network" -ForegroundColor Green
            }
            
            Write-Host "‚úÖ Cleanup completed successfully" -ForegroundColor Green
          }
          catch {
            Write-Warning "‚ö†Ô∏è Cleanup warning: $_"
          }
